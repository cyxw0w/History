#include<iostream>
using namespace std;

typedef struct  vertex {
	int count;
	vertex * link1 = NULL;
	vertex * link2 = NULL;
}Node;

int main() {
	vertex  p[9];
	p[0].count = 100;	//NULL


	p[1].count = 0;
	p[2].count = 0;
	p[3].count = 0;
	p[4].count = 2;
	p[5].count = 1;
	p[6].count = 2;
	p[7].count = 1;
	p[8].count = 2;

	p[1].link1 = (p + 4);
	p[1].link2 = p;

	p[2].link1 = (p + 4);
	p[2].link2 = (p + 5);

	p[3].link1 = (p + 8);
	p[3].link2 = p;

	p[4].link1 = (p + 6);
	p[4].link2 = (p + 7);

	p[5].link1 = (p + 6);
	p[5].link2 = p;

	p[6].link1 = p;
	p[6].link2 = p;

	p[7].link1 = (p + 8);
	p[7].link2 = p;

	p[8].link1 = p;
	p[8].link2 = p;

	cout << "원하는 방식을 선택하시오 (1,2) : ";
	
	int a = 0;
	int c = 0;
	cin >> a;
	if (a == 2) {
		for (int i = 8; i >= 1; i--) {

			if (p[i].count == 0) {
				p[i].count = 100;	// 노드 탐색 안하기 위한 것

				cout << i;
				c++;
				if (p[i].link1->count) {
					p[i].link1->count -= 1;
				}
				if (p[i].link2->count) {
					p[i].link2->count -= 1;
				}
				if (c != 8) {
					cout << " -> ";
				}
				else
					cout << endl;
				i = 9;	// 증감식땜에
			}
		}
	}
	else {
		for (int i = 1; i <= 8; i++) {

			if (p[i].count == 0) {
				p[i].count = 100;	// 노드 탐색 안하기 위한 것

				cout << i;
				c++;
				if (p[i].link1->count) {
					p[i].link1->count -= 1;
				}
				if (p[i].link2->count) {
					p[i].link2->count -= 1;
				}
				if (c != 8) {
					cout << " -> ";
				}
				else
					cout << endl;
				i = 1;
			}
		}
	}
	return 0;
}